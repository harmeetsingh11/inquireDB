from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
from langchain_groq import ChatGroq
from langchain_community.utilities import SQLDatabase

from prompts.prompts import get_sql_prompt_template, get_response_prompt_template


def get_sql_chain(db: SQLDatabase):
    """
    Constructs a chain for generating SQL prompts and processing SQL queries using a specified database connection.

    Args:
    - db (SQLDatabase): An instance of SQLDatabase for database interactions.

    Returns:
    - RunnablePassthrough: A chain of operations combining schema retrieval,
    SQL prompt template, language model processing (LLM), and output parsing.
    """
    prompt = get_sql_prompt_template()

    llm = ChatGroq(
        model="llama3-8b-8192",
        temperature=0,
        max_tokens=1024,
    )

    def get_schema(_):
        return db.get_table_info()

    return (
        RunnablePassthrough.assign(schema=get_schema) | prompt | llm | StrOutputParser()
    )


def get_response(user_query: str, db: SQLDatabase, chat_history: list):
    """
    Constructs a chain for generating responses to user SQL queries based on input
    query, database connection, and conversation history.

    Args:
    - user_query (str): The SQL query or user question to respond to.
    - db (SQLDatabase): An instance of SQLDatabase for database interactions.
    - chat_history (list): List containing history of interactions or conversations.

    Returns:
    - str: A natural language response generated by processing the user query through
      a language model and database interaction chain.
    """
    sql_chain = get_sql_chain(db)

    prompt = get_response_prompt_template()

    llm = ChatGroq(
        model="llama3-8b-8192",
        temperature=0,
        max_tokens=1024,
    )

    chain = (
        RunnablePassthrough.assign(query=sql_chain).assign(
            schema=lambda _: db.get_table_info(),
            response=lambda vars: db.run(vars["query"]),
        )
        | prompt
        | llm
        | StrOutputParser()
    )

    return chain.invoke(
        {
            "question": user_query,
            "chat_history": chat_history,
        }
    )
